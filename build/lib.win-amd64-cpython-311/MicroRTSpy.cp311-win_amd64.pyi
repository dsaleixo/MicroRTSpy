from typing import List, Tuple, overload

class AStarPathFinding:
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def findPathToAdjacentPosition(self, arg0: Unit, arg1: int, arg2: GameState) -> UnitAction: ...
    def findPathToPositionInRange(self, arg0: Unit, arg1: int, arg2: int, arg3: GameState) -> UnitAction: ...

class GameState:
    def __init__(self, arg0: PhysicalGameState, arg1: UnitTypeTable) -> None: ...
    def cycle(self) -> bool: ...
    def free(self, arg0: int, arg1: int) -> bool: ...
    def gameover(self) -> bool: ...
    def getActionAssignment(self, arg0: Unit) -> UnitActionAssignment: ...
    def getNextChangeTime(self) -> int: ...
    def getPhysicalGameState(self) -> PhysicalGameState: ...
    def getPlayer(self, arg0: int) -> Player: ...
    def getResourceUsage(self) -> ResourceUsage: ...
    def getTime(self) -> int: ...
    def isUnitActionAllowed(self, arg0: Unit, arg1: UnitAction) -> bool: ...
    def issueSafe(self, arg0: PlayerAction) -> bool: ...
    def updateScream(self) -> bool: ...
    def winner(self) -> int: ...

class PhysicalGameState:
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def addPlayer(self, arg0: Player) -> None: ...
    def addUnit(self, arg0: Unit) -> None: ...
    def gameover(self) -> bool: ...
    def getAllFree(self) -> bool: ...
    def getHeight(self) -> int: ...
    def getPlayer(self, arg0: int) -> Player: ...
    def getTERRAIN_WALL(self) -> int: ...
    def getTerrain(self, arg0: int, arg1: int) -> int: ...
    def getUnit(self, arg0: int) -> Unit: ...
    def getUnits(self) -> List[Unit]: ...
    def getWidth(self) -> int: ...
    def load(self, arg0: UnitTypeTable) -> PhysicalGameState: ...
    def winner(self) -> int: ...

class Player:
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def clone(self) -> Player: ...
    def fromXML(self) -> Player: ...
    def getID(self) -> int: ...
    def getResources(self) -> int: ...
    def setResources(self, arg0: int) -> None: ...
    def toString(self) -> str: ...

class PlayerAction:
    def __init__(self) -> None: ...
    def addUnitAction(self, arg0: Unit, arg1: UnitAction) -> None: ...
    def consistentWith(self, arg0: ResourceUsage, arg1: GameState) -> bool: ...
    def fillWithNones(self, arg0: GameState, arg1: int, arg2: int) -> None: ...
    def getActions(self) -> List[Tuple[Unit, UnitAction]]: ...
    def getResourceUsage(self) -> ResourceUsage: ...
    def setResourceUsage(self, arg0: ResourceUsage) -> None: ...

class ResourceUsage:
    def __init__(self) -> None: ...
    def consistentWith(self, arg0: ResourceUsage, arg1: GameState) -> bool: ...
    def getPositionsUsed(self) -> List[int]: ...
    def merge(self, arg0: ResourceUsage) -> None: ...
    def toString(self) -> str: ...

class Unit:
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: UnitType, arg3: int, arg4: int, arg5: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: UnitType, arg2: int, arg3: int, arg4: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: UnitType, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg0: Unit) -> None: ...
    def clone(self) -> Unit: ...
    def getAttackRange(self) -> int: ...
    def getAttackTime(self) -> int: ...
    def getCost(self) -> int: ...
    def getHarvestAmount(self) -> int: ...
    def getHarvestTime(self) -> int: ...
    def getHitPoints(self) -> int: ...
    def getID(self) -> int: ...
    def getMaxDamage(self) -> int: ...
    def getMaxHitPoints(self) -> int: ...
    def getMinDamage(self) -> int: ...
    def getMoveTime(self) -> int: ...
    def getPlayer(self) -> int: ...
    def getResources(self) -> int: ...
    def getType(self) -> UnitType: ...
    def getUnitActions(self, arg0: GameState) -> List[UnitAction]: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def hashCode(self) -> int: ...
    def setHitPoints(self, arg0: int) -> None: ...
    def setID(self, arg0: int) -> None: ...
    def setResources(self, arg0: int) -> None: ...
    def setType(self, arg0: UnitType) -> None: ...
    def setX(self, arg0: int) -> None: ...
    def setY(self, arg0: int) -> None: ...
    def toString(self) -> str: ...

class UnitAction:
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: UnitType) -> None: ...
    def ETA(self, arg0: Unit) -> int: ...
    def getActionName(self) -> str: ...
    def getDIRECTION_DOWN(self) -> int: ...
    def getDIRECTION_LEFT(self) -> int: ...
    def getDIRECTION_NONE(self) -> int: ...
    def getDIRECTION_RIGHT(self) -> int: ...
    def getDIRECTION_UP(self) -> int: ...
    def getDirection(self) -> int: ...
    def getLocationX(self) -> int: ...
    def getLocationY(self) -> int: ...
    def getNUMBER_OF_ACTION_TYPES(self) -> int: ...
    def getTYPE_ATTACK_LOCATION(self) -> int: ...
    def getTYPE_HARVEST(self) -> int: ...
    def getTYPE_MOVE(self) -> int: ...
    def getTYPE_NONE(self) -> int: ...
    def getTYPE_PRODUCE(self) -> int: ...
    def getTYPE_RETURN(self) -> int: ...
    def getType(self) -> int: ...
    def resourceUsage(self, arg0: Unit, arg1: PhysicalGameState) -> ResourceUsage: ...
    def toString(self) -> str: ...

class UnitActionAssignment:
    def __init__(self, *args, **kwargs) -> None: ...
    def getTime(self) -> int: ...
    def getUnit(self) -> Unit: ...
    def getUnitAction(self) -> UnitAction: ...
    def toString(self) -> str: ...

class UnitType:
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, arg0: UnitType) -> bool: ...
    def getCanAttack(self) -> bool: ...
    def getCanMove(self) -> bool: ...
    def getIsStockpile(self) -> bool: ...
    def getName(self) -> str: ...
    def getcanHarvest(self) -> bool: ...
    def getisResource(self) -> bool: ...
    def produces(self, arg0: UnitType) -> None: ...

class UnitTypeTable:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def addUnitType(self, arg0: UnitType) -> None: ...
    def getMoveConflictResolutionStrategy(self) -> int: ...
    def getUnit(self) -> List[UnitType]: ...
    def getUnitTypeString(self, arg0: str) -> UnitType: ...
    def getUnitTypes(self) -> List[UnitType]: ...
    def setUnitTypeTable(self, arg0: int, arg1: int) -> None: ...
